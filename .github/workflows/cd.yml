name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # „Éì„É´„Éâ„Å®„Éó„ÉÉ„Ç∑„É•
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
      version: ${{ steps.meta-api.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # API„Ç§„É°„Éº„Ç∏„ÅÆ„É°„Çø„Éá„Éº„Çø
      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # API„Ç§„É°„Éº„Ç∏„ÅÆ„Éì„É´„Éâ„Å®„Éó„ÉÉ„Ç∑„É•
      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      # Web„Ç§„É°„Éº„Ç∏„ÅÆ„É°„Çø„Éá„Éº„Çø
      - name: Extract Web metadata
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # Web„Ç§„É°„Éº„Ç∏„ÅÆ„Éì„É´„Éâ„Å®„Éó„ÉÉ„Ç∑„É•
      - name: Build and push Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ vars.API_URL }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # „Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞Áí∞Â¢É„Å∏„ÅÆ„Éá„Éó„É≠„Ç§
  deploy-staging:
    name: Deploy to Staging
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.process-todo.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          # Helm„Çí‰ΩøÁî®„Åó„Åü„Éá„Éó„É≠„Ç§Ôºà‰æãÔºâ
          helm upgrade --install process-todo ./helm \
            --namespace staging \
            --create-namespace \
            --set api.image.tag=${{ needs.build-and-push.outputs.version }} \
            --set web.image.tag=${{ needs.build-and-push.outputs.version }} \
            --set ingress.host=staging.process-todo.example.com \
            --values ./helm/values.staging.yaml \
            --wait \
            --timeout 10m

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.process-todo.example.com/api/health || exit 1
          curl -f https://staging.process-todo.example.com || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging Deployment: ${{ job.status }}
            Version: ${{ needs.build-and-push.outputs.version }}
            URL: https://staging.process-todo.example.com
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Êú¨Áï™Áí∞Â¢É„Å∏„ÅÆ„Éá„Éó„É≠„Ç§
  deploy-production:
    name: Deploy to Production
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://process-todo.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Backup database
        run: |
          # „Éá„Éº„Çø„Éô„Éº„Çπ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà„ÅÆÂÆüË°å
          kubectl exec -n production deployment/postgres -- \
            pg_dump -U postgres process_todo > backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Deploy to Kubernetes (Blue-Green)
        run: |
          # Blue-Green„Éá„Éó„É≠„Ç§„É°„É≥„Éà
          helm upgrade --install process-todo-green ./helm \
            --namespace production \
            --create-namespace \
            --set api.image.tag=${{ needs.build-and-push.outputs.version }} \
            --set web.image.tag=${{ needs.build-and-push.outputs.version }} \
            --set ingress.host=process-todo.example.com \
            --values ./helm/values.production.yaml \
            --wait \
            --timeout 15m
          
          # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
          sleep 60
          curl -f https://process-todo.example.com/api/health || exit 1
          
          # „Éà„É©„Éï„Ç£„ÉÉ„ÇØÂàá„ÇäÊõø„Åà
          kubectl patch service process-todo -n production \
            -p '{"spec":{"selector":{"deployment":"green"}}}'

      - name: Run E2E tests on production
        run: |
          npm ci
          npm run test:e2e:production
        working-directory: ./web
        env:
          PLAYWRIGHT_TEST_BASE_URL: https://process-todo.example.com
          API_BASE_URL: https://process-todo.example.com/api

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl patch service process-todo -n production \
            -p '{"spec":{"selector":{"deployment":"blue"}}}'
          
          helm rollback process-todo-green -n production

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            CHANGELOG.md
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üöÄ Production Deployment: ${{ job.status }}
            Version: ${{ needs.build-and-push.outputs.version }}
            URL: https://process-todo.example.com
            Release: ${{ github.ref }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # „É≠„Éº„É´„Éê„ÉÉ„ÇØÁî®„Ç∏„Éß„Éñ
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          else
            echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          fi
          export KUBECONFIG=kubeconfig

      - name: Perform rollback
        run: |
          namespace=${{ github.event.inputs.environment }}
          helm rollback process-todo -n $namespace
          
          # „É≠„Éº„É´„Éê„ÉÉ„ÇØÂæå„ÅÆ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
          sleep 30
          if [ "$namespace" = "production" ]; then
            curl -f https://process-todo.example.com/api/health || exit 1
          else
            curl -f https://staging.process-todo.example.com/api/health || exit 1
          fi

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            ‚ö†Ô∏è Rollback executed
            Environment: ${{ github.event.inputs.environment }}
            Status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}