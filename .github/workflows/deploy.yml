name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: ${{ github.repository }}-api
  WEB_IMAGE_NAME: ${{ github.repository }}-web

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      api-image: ${{ steps.image.outputs.api-image }}
      web-image: ${{ steps.image.outputs.web-image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for Web
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
    
    - name: Build and push Web Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}
    
    - name: Output image tags
      id: image
      run: |
        echo "api-image=${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "web-image=${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || github.event_name != 'workflow_dispatch'
    environment:
      name: staging
      url: https://staging.process-todo.example.com
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging..."
        echo "API Image: ${{ needs.build-and-push.outputs.api-image }}"
        echo "Web Image: ${{ needs.build-and-push.outputs.web-image }}"
        # Add actual deployment commands here (kubectl, helm, etc.)

  deploy-production:
    name: Deploy to Production
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || github.event_name == 'release'
    environment:
      name: production
      url: https://process-todo.example.com
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production..."
        echo "API Image: ${{ needs.build-and-push.outputs.api-image }}"
        echo "Web Image: ${{ needs.build-and-push.outputs.web-image }}"
        # Add actual deployment commands here (kubectl, helm, etc.)
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
    
    - name: Notify deployment status
      if: always()
      run: |
        echo "Deployment status: ${{ job.status }}"
        # Add notification logic (Slack, email, etc.)