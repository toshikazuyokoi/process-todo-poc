generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProcessTemplate {
  id            Int            @id @default(autoincrement())
  name          String
  version       Int            @default(1)
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  cases         Case[]
  stepTemplates StepTemplate[]
  aiTemplateHistory AITemplateGenerationHistory[]

  @@map("process_templates")
}

model StepTemplate {
  id                    Int             @id @default(autoincrement())
  processId             Int             @map("process_id")
  seq                   Int
  name                  String
  basis                 String
  offsetDays            Int             @default(0) @map("offset_days")
  requiredArtifactsJson Json            @default("[]") @map("required_artifacts_json")
  dependsOnJson         Json            @default("[]") @map("depends_on_json")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  stepInstances         StepInstance[]
  process               ProcessTemplate @relation(fields: [processId], references: [id])

  @@index([processId, seq], map: "idx_step_templates_process_seq")
  @@map("step_templates")
}

model Case {
  id            Int             @id @default(autoincrement())
  processId     Int             @map("process_id")
  title         String
  goalDateUtc   DateTime        @map("goal_date_utc")
  status        String          @default("open")
  createdBy     Int?            @map("created_by")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  createdByUser User?           @relation(fields: [createdBy], references: [id])
  process       ProcessTemplate @relation(fields: [processId], references: [id])
  stepInstances StepInstance[]

  @@index([processId, status], map: "idx_cases_process_status")
  @@map("cases")
}

model StepInstance {
  id         Int           @id @default(autoincrement())
  caseId     Int           @map("case_id")
  templateId Int?          @map("template_id")
  name       String
  startDateUtc DateTime?   @map("start_date_utc")
  dueDateUtc DateTime?     @map("due_date_utc")
  assigneeId Int?          @map("assignee_id")
  status     String        @default("todo")
  locked     Boolean       @default(false)
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  artifacts  Artifact[]
  comments   Comment[]
  assignee   User?         @relation(fields: [assigneeId], references: [id])
  case       Case          @relation(fields: [caseId], references: [id])
  template   StepTemplate? @relation(fields: [templateId], references: [id])

  @@index([caseId, dueDateUtc], map: "idx_step_instances_case_due")
  @@map("step_instances")
}

model Artifact {
  id        Int          @id @default(autoincrement())
  stepId    Int          @map("step_id")
  kind      String
  fileName  String       @map("file_name")
  fileSize  Int          @map("file_size")
  mimeType  String       @map("mime_type")
  s3Key     String       @map("s3_key")
  required  Boolean      @default(false)
  uploadedBy Int?        @map("uploaded_by")
  uploadedAt DateTime?   @map("uploaded_at")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  step      StepInstance @relation(fields: [stepId], references: [id])
  uploader  User?        @relation(fields: [uploadedBy], references: [id])

  @@map("artifacts")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  role          String         @default("member")
  timezone      String         @default("Asia/Tokyo")
  isActive      Boolean        @default(true) @map("is_active")
  emailVerified Boolean        @default(false) @map("email_verified")
  emailVerifiedAt DateTime?    @map("email_verified_at")
  lastLoginAt   DateTime?      @map("last_login_at")
  failedLoginAttempts Int      @default(0) @map("failed_login_attempts")
  lockedUntil   DateTime?      @map("locked_until")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  
  auditLogs     AuditLog[]
  createdCases  Case[]
  assignedSteps StepInstance[]
  uploadedArtifacts Artifact[]
  comments      Comment[]
  notifications Notification[]
  refreshTokens RefreshToken[]
  userRoles     UserRole[]
  teamMembers   TeamMember[]
  aiSessions    AIInterviewSession[]
  aiBackgroundJobs AIBackgroundJob[]
  aiKnowledge   AIProcessKnowledge[]
  aiTemplateHistory AITemplateGenerationHistory[]
  aiUsageStats  AIUsageStatistics[]

  @@index([email, isActive])
  @@map("users")
}

model Holiday {
  countryCode String   @map("country_code")
  date        DateTime @db.Date
  name        String?

  @@id([countryCode, date])
  @@map("holidays")
}

model AuditLog {
  id           Int      @id @default(autoincrement())
  actorId      Int?     @map("actor_id")
  resourceType String   @map("resource_type")
  resourceId   Int      @map("resource_id")
  action       String
  diffJson     Json?    @map("diff_json")
  createdAt    DateTime @default(now()) @map("created_at")
  actor        User?    @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}

model Comment {
  id        Int      @id @default(autoincrement())
  stepId    Int      @map("step_id")
  parentId  Int?     @map("parent_id")
  userId    Int      @map("user_id")
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  step      StepInstance @relation(fields: [stepId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  parent    Comment?     @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]    @relation("CommentReplies")

  @@index([stepId, createdAt])
  @@map("comments")
}

model Notification {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  type       String   @db.VarChar(50)
  title      String   @db.VarChar(255)
  message    String   @db.Text
  data       Json?
  isRead     Boolean  @default(false) @map("is_read")
  readAt     DateTime? @map("read_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead, createdAt])
  @@map("notifications")
}

// 認証関連のモデル
model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  revokedAt DateTime? @map("revoked_at")
  
  user      User     @relation(fields: [userId], references: [id])

  @@index([token, expiresAt])
  @@map("refresh_tokens")
}

// RBAC関連のモデル
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) @map("is_system")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  resource    String
  action      String
  description String?
  
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")
  
  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  teamId    Int?     @map("team_id")
  grantedAt DateTime @default(now()) @map("granted_at")
  grantedBy Int?     @map("granted_by")
  
  user    User  @relation(fields: [userId], references: [id])
  role    Role  @relation(fields: [roleId], references: [id])
  team    Team? @relation(fields: [teamId], references: [id])

  @@unique([userId, roleId, teamId])
  @@map("user_roles")
}

// 組織・チーム関連のモデル
model Organization {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  plan      String   @default("free")
  settings  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  teams     Team[]

  @@map("organizations")
}

model Team {
  id             Int      @id @default(autoincrement())
  organizationId Int      @map("organization_id")
  name           String
  description    String?
  settings       Json     @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  organization Organization @relation(fields: [organizationId], references: [id])
  teamMembers  TeamMember[]
  userRoles    UserRole[]

  @@map("teams")
}

model TeamMember {
  userId    Int      @map("user_id")
  teamId    Int      @map("team_id")
  joinedAt  DateTime @default(now()) @map("joined_at")
  
  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
  @@map("team_members")
}

// AI Agent関連のモデル

model AIInterviewSession {
  id                     Int                        @id @default(autoincrement())
  sessionId              String                     @unique @map("session_id") @db.VarChar(36)
  userId                 Int                        @map("user_id")
  status                 String                     @default("active") @db.VarChar(20)
  context                Json?                      @db.JsonB
  conversation           Json                       @default("[]") @db.JsonB
  extractedRequirements  Json                       @default("[]") @map("extracted_requirements") @db.JsonB
  generatedTemplate      Json?                      @map("generated_template") @db.JsonB
  createdAt              DateTime                   @default(now()) @map("created_at")
  updatedAt              DateTime                   @updatedAt @map("updated_at")
  expiresAt              DateTime                   @map("expires_at")
  
  user                   User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  backgroundJobs         AIBackgroundJob[]
  templateGenerations    AITemplateGenerationHistory[]
  
  @@index([sessionId])
  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([userId, createdAt], map: "idx_ai_interview_sessions_active")
  @@map("ai_interview_sessions")
}

model AIBackgroundJob {
  id            Int                  @id @default(autoincrement())
  jobId         String               @unique @map("job_id") @db.VarChar(36)
  jobType       String               @map("job_type") @db.VarChar(50)
  jobData       Json                 @map("job_data") @db.JsonB
  status        String               @default("pending") @db.VarChar(20)
  sessionId     String?              @map("session_id") @db.VarChar(36)
  userId        Int                  @map("user_id")
  createdAt     DateTime             @default(now()) @map("created_at")
  startedAt     DateTime?            @map("started_at")
  completedAt   DateTime?            @map("completed_at")
  failedAt      DateTime?            @map("failed_at")
  errorMessage  String?              @map("error_message") @db.Text
  retryCount    Int                  @default(0) @map("retry_count")
  maxRetries    Int                  @default(3) @map("max_retries")
  result        Json?                @db.JsonB
  
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  session       AIInterviewSession?  @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  
  @@index([jobId])
  @@index([status])
  @@index([sessionId])
  @@index([userId])
  @@index([jobType])
  @@index([createdAt])
  @@index([createdAt], map: "idx_ai_background_jobs_pending")
  @@map("ai_background_jobs")
}

model AIProcessKnowledge {
  id                    Int      @id @default(autoincrement())
  category              String   @db.VarChar(50)
  industry              String?  @db.VarChar(100)
  processType           String?  @map("process_type") @db.VarChar(100)
  title                 String   @db.VarChar(255)
  description           String?  @db.Text
  content               Json     @db.JsonB
  bestPractices         Json     @default("[]") @map("best_practices") @db.JsonB
  complianceRequirements Json     @default("[]") @map("compliance_requirements") @db.JsonB
  version               Int      @default(1)
  isActive              Boolean  @default(true) @map("is_active")
  confidenceScore       Decimal  @default(0.5) @map("confidence_score") @db.Decimal(3, 2)
  source                String?  @db.VarChar(255)
  createdBy             Int?     @map("created_by")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  creator               User?    @relation(fields: [createdBy], references: [id])
  
  @@index([category])
  @@index([industry])
  @@index([processType])
  @@index([isActive])
  @@index([confidenceScore])
  @@index([industry, processType, isActive], map: "idx_ai_process_knowledge_lookup")
  @@map("ai_process_knowledge")
}

model AIWebResearchCache {
  id                Int      @id @default(autoincrement())
  queryHash         String   @unique @map("query_hash") @db.VarChar(64)
  queryText         String   @map("query_text") @db.Text
  searchParameters  Json?    @map("search_parameters") @db.JsonB
  results           Json     @db.JsonB
  sourceReliability Json?    @map("source_reliability") @db.JsonB
  createdAt         DateTime @default(now()) @map("created_at")
  expiresAt         DateTime @map("expires_at")
  hitCount          Int      @default(1) @map("hit_count")
  lastAccessedAt    DateTime @default(now()) @map("last_accessed_at")
  
  @@index([queryHash])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([lastAccessedAt], map: "idx_ai_web_research_cache_valid")
  @@map("ai_web_research_cache")
}

model AITemplateGenerationHistory {
  id                 Int                 @id @default(autoincrement())
  sessionId          String              @map("session_id") @db.VarChar(36)
  userId             Int                 @map("user_id")
  processTemplateId  Int?                @map("process_template_id")
  generatedTemplate  Json                @map("generated_template") @db.JsonB
  requirementsUsed   Json                @map("requirements_used") @db.JsonB
  knowledgeSources   Json                @default("[]") @map("knowledge_sources") @db.JsonB
  researchSources    Json                @default("[]") @map("research_sources") @db.JsonB
  confidenceScore    Decimal?            @map("confidence_score") @db.Decimal(3, 2)
  userFeedback       Json?               @map("user_feedback") @db.JsonB
  feedbackRating     Int?                @map("feedback_rating")
  wasUsed            Boolean             @default(false) @map("was_used")
  modifications      Json                @default("[]") @db.JsonB
  createdAt          DateTime            @default(now()) @map("created_at")
  finalizedAt        DateTime?           @map("finalized_at")
  
  session            AIInterviewSession  @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  processTemplate    ProcessTemplate?    @relation(fields: [processTemplateId], references: [id], onDelete: SetNull)
  
  @@index([sessionId])
  @@index([userId])
  @@index([processTemplateId])
  @@index([createdAt])
  @@index([wasUsed])
  @@index([feedbackRating])
  @@map("ai_template_generation_history")
}

model AIUsageStatistics {
  id              Int                 @id @default(autoincrement())
  userId          Int                 @map("user_id")
  actionType      String              @map("action_type") @db.VarChar(50)
  sessionId       String?             @map("session_id") @db.VarChar(36)
  tokensUsed      Int                 @default(0) @map("tokens_used")
  costUsd         Decimal             @default(0.0000) @map("cost_usd") @db.Decimal(10, 4)
  processingTimeMs Int?               @map("processing_time_ms")
  modelUsed       String?             @map("model_used") @db.VarChar(50)
  success         Boolean             @default(true)
  errorCode       String?             @map("error_code") @db.VarChar(50)
  createdAt       DateTime            @default(now()) @map("created_at")
  
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([actionType])
  @@index([createdAt])
  @@index([success])
  @@index([userId, actionType, createdAt], map: "idx_ai_usage_statistics_report")
  @@map("ai_usage_statistics")
}
